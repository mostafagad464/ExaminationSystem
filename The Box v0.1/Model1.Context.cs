//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace The_Box_v0._1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ExaminationSystemEntities : DbContext
    {
        public ExaminationSystemEntities()
            : base("name=ExaminationSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Choice> Choices { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Exam> Exams { get; set; }
        public virtual DbSet<Instructor> Instructors { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Student_Courses> Student_Courses { get; set; }
        public virtual DbSet<Student_Exam> Student_Exam { get; set; }
        public virtual DbSet<Topic> Topics { get; set; }
        public virtual DbSet<Track> Tracks { get; set; }
    
        public virtual int course_delete(Nullable<int> crsid, string crsname)
        {
            var crsidParameter = crsid.HasValue ?
                new ObjectParameter("crsid", crsid) :
                new ObjectParameter("crsid", typeof(int));
    
            var crsnameParameter = crsname != null ?
                new ObjectParameter("crsname", crsname) :
                new ObjectParameter("crsname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("course_delete", crsidParameter, crsnameParameter);
        }
    
        public virtual int course_insert(Nullable<int> crsid, string crsname)
        {
            var crsidParameter = crsid.HasValue ?
                new ObjectParameter("crsid", crsid) :
                new ObjectParameter("crsid", typeof(int));
    
            var crsnameParameter = crsname != null ?
                new ObjectParameter("crsname", crsname) :
                new ObjectParameter("crsname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("course_insert", crsidParameter, crsnameParameter);
        }
    
        public virtual ObjectResult<course_select_Result> course_select(Nullable<int> crsid, string crsname)
        {
            var crsidParameter = crsid.HasValue ?
                new ObjectParameter("crsid", crsid) :
                new ObjectParameter("crsid", typeof(int));
    
            var crsnameParameter = crsname != null ?
                new ObjectParameter("crsname", crsname) :
                new ObjectParameter("crsname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<course_select_Result>("course_select", crsidParameter, crsnameParameter);
        }
    
        public virtual int course_update(Nullable<int> crsid, string crsname)
        {
            var crsidParameter = crsid.HasValue ?
                new ObjectParameter("crsid", crsid) :
                new ObjectParameter("crsid", typeof(int));
    
            var crsnameParameter = crsname != null ?
                new ObjectParameter("crsname", crsname) :
                new ObjectParameter("crsname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("course_update", crsidParameter, crsnameParameter);
        }
    
        public virtual ObjectResult<GetChoiceOfQ_Result> GetChoiceOfQ(Nullable<int> idOfExam)
        {
            var idOfExamParameter = idOfExam.HasValue ?
                new ObjectParameter("IdOfExam", idOfExam) :
                new ObjectParameter("IdOfExam", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChoiceOfQ_Result>("GetChoiceOfQ", idOfExamParameter);
        }
    
        public virtual ObjectResult<GetRandomQuestions_Result> GetRandomQuestions(Nullable<int> courseId, Nullable<int> exam_id, Nullable<int> e_Duration, Nullable<int> instructorId, Nullable<int> mCQSpilt, Nullable<int> tFSpilt)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var exam_idParameter = exam_id.HasValue ?
                new ObjectParameter("exam_id", exam_id) :
                new ObjectParameter("exam_id", typeof(int));
    
            var e_DurationParameter = e_Duration.HasValue ?
                new ObjectParameter("E_Duration", e_Duration) :
                new ObjectParameter("E_Duration", typeof(int));
    
            var instructorIdParameter = instructorId.HasValue ?
                new ObjectParameter("instructorId", instructorId) :
                new ObjectParameter("instructorId", typeof(int));
    
            var mCQSpiltParameter = mCQSpilt.HasValue ?
                new ObjectParameter("MCQSpilt", mCQSpilt) :
                new ObjectParameter("MCQSpilt", typeof(int));
    
            var tFSpiltParameter = tFSpilt.HasValue ?
                new ObjectParameter("TFSpilt", tFSpilt) :
                new ObjectParameter("TFSpilt", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRandomQuestions_Result>("GetRandomQuestions", courseIdParameter, exam_idParameter, e_DurationParameter, instructorIdParameter, mCQSpiltParameter, tFSpiltParameter);
        }
    
        public virtual int setstbyadd(string add)
        {
            var addParameter = add != null ?
                new ObjectParameter("add", add) :
                new ObjectParameter("add", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setstbyadd", addParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int std_crs_delete(Nullable<int> stdid, string crsid, Nullable<int> grade)
        {
            var stdidParameter = stdid.HasValue ?
                new ObjectParameter("stdid", stdid) :
                new ObjectParameter("stdid", typeof(int));
    
            var crsidParameter = crsid != null ?
                new ObjectParameter("crsid", crsid) :
                new ObjectParameter("crsid", typeof(string));
    
            var gradeParameter = grade.HasValue ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("std_crs_delete", stdidParameter, crsidParameter, gradeParameter);
        }
    
        public virtual int std_crs_insert(Nullable<int> stdid, string crsid, Nullable<int> grade)
        {
            var stdidParameter = stdid.HasValue ?
                new ObjectParameter("stdid", stdid) :
                new ObjectParameter("stdid", typeof(int));
    
            var crsidParameter = crsid != null ?
                new ObjectParameter("crsid", crsid) :
                new ObjectParameter("crsid", typeof(string));
    
            var gradeParameter = grade.HasValue ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("std_crs_insert", stdidParameter, crsidParameter, gradeParameter);
        }
    
        public virtual ObjectResult<std_crs_select_Result> std_crs_select(Nullable<int> stdid, string crsid, Nullable<int> grade)
        {
            var stdidParameter = stdid.HasValue ?
                new ObjectParameter("stdid", stdid) :
                new ObjectParameter("stdid", typeof(int));
    
            var crsidParameter = crsid != null ?
                new ObjectParameter("crsid", crsid) :
                new ObjectParameter("crsid", typeof(string));
    
            var gradeParameter = grade.HasValue ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<std_crs_select_Result>("std_crs_select", stdidParameter, crsidParameter, gradeParameter);
        }
    
        public virtual int std_crs_update(Nullable<int> stdid, string crsid, Nullable<int> grade)
        {
            var stdidParameter = stdid.HasValue ?
                new ObjectParameter("stdid", stdid) :
                new ObjectParameter("stdid", typeof(int));
    
            var crsidParameter = crsid != null ?
                new ObjectParameter("crsid", crsid) :
                new ObjectParameter("crsid", typeof(string));
    
            var gradeParameter = grade.HasValue ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("std_crs_update", stdidParameter, crsidParameter, gradeParameter);
        }
    }
}
